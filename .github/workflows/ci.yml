name: ProxShift CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'full'
        type: choice
        options:
        - basic
        - full
        - integration

env:
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  # Job 1: Static Analysis and Syntax Tests
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq shellcheck

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible yamllint ansible-lint
        
    - name: Install Ansible collections
      run: |
        if [[ -f "collections/requirements.yml" ]]; then
          ansible-galaxy collection install -r collections/requirements.yml
        fi

    - name: Make test scripts executable
      run: chmod +x tests/*.sh

    - name: Run prerequisites tests
      run: ./tests/test_prerequisites.sh

    - name: Run syntax validation tests
      run: ./tests/test_syntax.sh

    - name: Run template validation tests
      run: ./tests/test_templates.sh

  # Job 2: Extended Validation (optional tools)
  extended-validation:
    name: Extended Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'full' || github.event.inputs.test_level == '' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install extended dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq shellcheck yamllint
        python -m pip install --upgrade pip
        pip install ansible ansible-lint

    - name: Install Ansible collections
      run: |
        if [[ -f "collections/requirements.yml" ]]; then
          ansible-galaxy collection install -r collections/requirements.yml
        fi

    - name: Run yamllint on YAML files
      run: |
        find . -name "*.yml" -o -name "*.yaml" | grep -v .git | xargs yamllint -d relaxed

    - name: Run ansible-lint on playbooks
      run: |
        if command -v ansible-lint &> /dev/null; then
          ansible-lint main.yaml --skip-list=yaml[line-length] || true
        fi

    - name: Run shellcheck on shell scripts
      run: |
        find . -name "*.sh" | grep -v .git | xargs shellcheck -S warning

  # Job 3: Project Structure Validation
  project-structure:
    name: Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate project structure
      run: |
        echo "Checking required directories..."
        required_dirs=("roles" "examples" "tools" "docs" "tests")
        for dir in "${required_dirs[@]}"; do
          if [[ ! -d "$dir" ]]; then
            echo "❌ Missing required directory: $dir"
            exit 1
          else
            echo "✅ Found directory: $dir"
          fi
        done

    - name: Validate required files
      run: |
        echo "Checking required files..."
        required_files=(
          "ansible.cfg"
          "main.yaml"
          "examples/site-config.yaml"
          "examples/vault-credentials.yml"
          "examples/clusters.yml.template"
          "examples/README.md"
          "tools/ocp_pm.sh"
          "docs/index.md"
          "docs/_config.yml"
          "tests/README.md"
        )
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found file: $file"
          fi
        done

    - name: Check for security files
      run: |
        echo "Checking for potential security issues..."
        # Check for common secret patterns (basic check)
        if grep -r "password\|secret\|key" examples/ | grep -v "your-" | grep -v "example" | grep -v "template"; then
          echo "⚠️  WARNING: Potential secrets found in examples"
          exit 1
        fi
        echo "✅ No obvious secrets found in examples"

  # Job 4: Documentation Tests
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README files
      run: |
        echo "Checking README files..."
        find . -name "README.md" | while read readme; do
          echo "Checking $readme..."
          if [[ -s "$readme" ]]; then
            echo "✅ $readme is not empty"
          else
            echo "❌ $readme is empty"
            exit 1
          fi
        done

    - name: Validate markdown links (basic check)
      run: |
        echo "Checking for broken markdown links..."
        # Basic check for obvious broken links
        find . -name "*.md" -exec grep -l "](http" {} \; | while read file; do
          echo "Found external links in $file"
        done

  # Job 5: Integration Tests (optional)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'integration' || github.event.inputs.test_level == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python -m pip install --upgrade pip
        pip install ansible

    - name: Install Ansible collections
      run: |
        if [[ -f "collections/requirements.yml" ]]; then
          ansible-galaxy collection install -r collections/requirements.yml
        fi

    - name: Run CI pipeline
      env:
        CI: true
      run: |
        chmod +x tests/ci_pipeline.sh
        ./tests/ci_pipeline.sh

  # Job 6: Test Matrix for Multiple OS (optional)
  cross-platform:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.test_level == 'full' || (github.event_name != 'workflow_dispatch' && github.event_name == 'push')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python -m pip install --upgrade pip
        pip install ansible

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install jq
        python -m pip install --upgrade pip
        pip install ansible

    - name: Install Ansible collections
      run: |
        if [[ -f "collections/requirements.yml" ]]; then
          ansible-galaxy collection install -r collections/requirements.yml
        fi

    - name: Run basic tests
      run: |
        chmod +x tests/*.sh
        ./tests/test_prerequisites.sh
        ./tests/test_syntax.sh

  # Job 7: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.test_level == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 8: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, project-structure, documentation]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Test Results Summary:"
        echo "===================="
        
        # Check job results
        static_result="${{ needs.static-analysis.result }}"
        structure_result="${{ needs.project-structure.result }}"
        docs_result="${{ needs.documentation.result }}"
        
        echo "Static Analysis: $static_result"
        echo "Project Structure: $structure_result"
        echo "Documentation: $docs_result"
        
        # Determine overall result
        if [[ "$static_result" == "success" && "$structure_result" == "success" && "$docs_result" == "success" ]]; then
          echo ""
          echo "🎉 All core tests passed!"
          echo "✅ ProxShift is ready for deployment"
        else
          echo ""
          echo "❌ Some tests failed. Please check the logs above."
          exit 1
        fi

  # Job 9: Artifact Collection
  artifacts:
    name: Collect Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [static-analysis, extended-validation, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test report
      run: |
        mkdir -p test-reports
        echo "ProxShift CI Test Report" > test-reports/summary.md
        echo "========================" >> test-reports/summary.md
        echo "" >> test-reports/summary.md
        echo "Generated at: $(date)" >> test-reports/summary.md
        echo "Commit: ${{ github.sha }}" >> test-reports/summary.md
        echo "Branch: ${{ github.ref_name }}" >> test-reports/summary.md
        echo "" >> test-reports/summary.md
        echo "Test Results:" >> test-reports/summary.md
        echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> test-reports/summary.md
        echo "- Extended Validation: ${{ needs.extended-validation.result }}" >> test-reports/summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-reports/summary.md

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: test-reports/
        retention-days: 30
