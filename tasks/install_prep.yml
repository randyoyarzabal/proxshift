- name: Check if requesting valid cluster name
  ansible.builtin.assert:
    that:
      - cluster_name in cluster_list
    fail_msg: "Cluster name '{{ cluster_name }}' is not valid. Valid options are: {{ cluster_list | join(', ') }}"

# Check if ocp_version binary exists in the ocp_installer_path
- name: Check if ocp_version binary exists
  ansible.builtin.stat:
    path: "{{ ocp_installer_path }}/openshift-install-{{ ocp_version }}"
  register: ocp_version_stat

# Fail if ocp_version binary does not exist
- name: "Fail if ocp_version binary does not exist: {{ ocp_version }}"
  ansible.builtin.fail:
    msg: "The OpenShift installer binary for version {{ ocp_version }} does not exist at {{ ocp_installer_path }}/openshift-install-{{ ocp_version }}."
  when: not ocp_version_stat.stat.exists

# Overwrite symlink for ocp binary in ocp_installer_path based on ocp_version if binary exists
- name: "Overwrite symlink for ocp binary if it exists: {{ ocp_version }}"
  ansible.builtin.file:
    src: "{{ ocp_installer_path }}/openshift-install-{{ ocp_version }}"
    dest: "{{ ocp_installer_path }}/openshift-install"
    state: link
  when: ocp_version_stat.stat.exists and ocp_installer_path is defined

# Check if a cluster exists by trying to login to the cluster
- name: "Check if OpenShift cluster is provisioned with rescue block"
  when: not force_install
  block:
    - name: "Checking if OpenShift cluster is provisioned: {{ cluster_name }}"
      ansible.builtin.include_tasks:
        file: tasks/cluster_login.yml
      vars:
        login_cluster_name: "{{ cluster_name }}"
        login_cluster_api_url: "{{ cluster_api_url }}"
        login_auth_method: "kubeadmin"
      # cluster_auth_token will contain the kubeadmin api-key for the cluster
  rescue:
    - name: "Cluster status check failed"
      ansible.builtin.debug:
        msg: "Cluster '{{ cluster_name }}' is not provisioned."
  tags:
    - provisioning_check

- name: "Check if cluster is live or force provision enabled"
  ansible.builtin.set_fact:
    is_cluster_provisioned: true
  when: force_install or (cluster_auth_token is defined and cluster_auth_token | length > 0)
  failed_when: not force_install and is_cluster_provisioned
  tags:
    - provisioning_check

# TODO: Check if this is still needed after previous task
- name: "End playbook if cluster is already provisioned and force_install is not true"
  ansible.builtin.meta: end_play
  when:
    - is_cluster_provisioned
    - not force_install
  tags:
    - provisioning_check

- name: "Recursively delete install directory if force_install is true: {{ ocp_install_dir }}"
  ansible.builtin.file:
    path: '{{ ocp_install_dir }}'
    state: absent
  when: force_install | bool
  tags:
    - always
    - manifests  
    - create_iso

- name: "Display installation preparation status"
  ansible.builtin.debug:
    msg: |-
      Installation preparation completed for cluster: {{ cluster_name }}
      Details:
        - Cluster: {{ cluster_name }}
        - Version: {{ ocp_version }}
        - Force install: {{ force_install }}
        - Already provisioned: {{ is_cluster_provisioned }}
        - Install directory: {{ ocp_install_dir }}
        {% if force_install %}
        - Install directory cleaned (force_install=true)
        {% endif %}
      
      Next steps:
        - Generate manifests: --tags=manifests
        - Create ISO: --tags=create_iso  
        - Or use ps.provision for full workflow
